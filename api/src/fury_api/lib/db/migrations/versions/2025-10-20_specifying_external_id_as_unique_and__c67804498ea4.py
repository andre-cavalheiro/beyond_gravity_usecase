"""specifying external-id as unique and index.

Revision ID: c67804498ea4
Revises: 19e4ee3e3cb7
Create Date: 2025-10-20 04:53:30.076117+00:00

"""

from __future__ import annotations

import warnings

from alembic import op


__all__ = ["downgrade", "upgrade", "schema_upgrades", "schema_downgrades", "data_upgrades", "data_downgrades"]

# revision identifiers, used by Alembic.
revision = "c67804498ea4"
down_revision = "19e4ee3e3cb7"
branch_labels = None
depends_on = None


def upgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)

        schema_upgrades()
        data_upgrades()
        schema_upgrades_pos_data()


def downgrade() -> None:
    with warnings.catch_warnings():
        warnings.filterwarnings("ignore", category=UserWarning)

        data_downgrades()
        schema_downgrades()


def schema_upgrades() -> None:
    """Schema upgrade migrations go here."""

    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("earthquake", schema=None) as batch_op:
        batch_op.drop_index("ix_earthquake_external_id")
        batch_op.create_index(batch_op.f("ix_earthquake_external_id"), ["external_id"], unique=True)

    # ### end Alembic commands ###


def schema_downgrades() -> None:
    """Schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table("earthquake", schema=None) as batch_op:
        batch_op.drop_index(batch_op.f("ix_earthquake_external_id"))
        batch_op.create_index("ix_earthquake_external_id", ["external_id"], unique=False)

    # ### end Alembic commands ###


def schema_upgrades_pos_data() -> None:
    """Schema upgrade migrations that need to be run after data migrations go here."""


def data_upgrades() -> None:
    """Data upgrade migrations go here."""
    op.execute("""
        DELETE FROM earthquake
        WHERE id IN (
            SELECT id
            FROM (
                SELECT
                    id,
                    ROW_NUMBER() OVER (
                        PARTITION BY external_id ORDER BY created_at DESC
                    ) as rn
                FROM earthquake
            ) AS subquery
            WHERE rn > 1
        );
    """)


def data_downgrades() -> None:
    """Data downgrade migrations go here."""
