from fury_api.lib.settings import config
from fury_api.lib.firebase import generate_custom_token

import requests


def exchange_custom_token_for_id_token(custom_token: str, firebase_web_api_key: str) -> str:
    """
    Exchange Firebase custom token for a Firebase ID token.

    :param custom_token: The custom token generated by Firebase Admin SDK.
    :return: The ID token.
    """
    try:
        url = f"https://identitytoolkit.googleapis.com/v1/accounts:signInWithCustomToken?key={firebase_web_api_key}"
        payload = {"token": custom_token, "returnSecureToken": True}

        response = requests.post(url, json=payload)

        if response.status_code == 200:
            # Extract ID token from response
            id_token = response.json().get("idToken")
            return id_token
        else:
            raise Exception(f"Failed to exchange custom token: {response.text}")
    except Exception as e:
        raise Exception(f"Error exchanging custom token for ID token: {e}")


if __name__ == "__main__":
    if config.dev.TOKEN_GENERATION_FIREBASE_USER_ID:
        custom_token = generate_custom_token(config.dev.TOKEN_GENERATION_FIREBASE_USER_ID)
        id_token = exchange_custom_token_for_id_token(custom_token, config.firebase.WEB_API_KEY.get_secret_value())
        print(id_token)
    else:
        raise Exception(
            "You need to set the env var 'FURY_API_DEVEX_TOKEN_GENERATION_FIREBASE_USER_ID' with a valid firebase user ID."
        )
